// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/shared/p2p (interfaces: Feed)

// Package mock_p2p is a generated GoMock package.
package mock_p2p

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/prysmaticlabs/prysm/shared/event"
)

// MockFeed is a mock of Feed interface
type MockFeed struct {
	ctrl     *gomock.Controller
	recorder *MockFeedMockRecorder
}

// MockFeedMockRecorder is the mock recorder for MockFeed
type MockFeedMockRecorder struct {
	mock *MockFeed
}

// NewMockFeed creates a new mock instance
func NewMockFeed(ctrl *gomock.Controller) *MockFeed {
	mock := &MockFeed{ctrl: ctrl}
	mock.recorder = &MockFeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeed) EXPECT() *MockFeedMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockFeed) Send(arg0 interface{}) int {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFeedMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFeed)(nil).Send), arg0)
}

// Subscribe mocks base method
func (m *MockFeed) Subscribe(arg0 interface{}) event.Subscription {
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockFeedMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockFeed)(nil).Subscribe), arg0)
}
